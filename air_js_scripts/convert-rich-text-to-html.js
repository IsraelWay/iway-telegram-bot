// –°–∫—Ä–∏–ø—Ç –¥–ª—è Airtable: –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è Rich Text –≤ HTML
// –ë–µ—Ä–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–æ–ª—è Rich Text –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç HTML –≤ –¥—Ä—É–≥–æ–µ –ø–æ–ª–µ

// Server access
let creds = base.getTable('Techdata');
let host, token = null;
let servers = await creds.selectRecordsAsync();
for (let server of servers.records) {
   if (server.getCellValue("Active")) {
       host = server.getCellValueAsString("host");
       token = server.getCellValueAsString("token");
       break;
   }
}
if (!host || !token) {
    output.markdown("‚ùå –ù–µ –∑–∞–¥–∞–Ω –¥–æ—Å—Ç—É–ø –¥–æ —Å–µ—Ä–≤–µ—Ä–∞");
    return;
}
output.markdown("üîó Connecting to: " + host);

// –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å—å –∏–∑ —Ç–∞–±–ª–∏—Ü—ã "–®–∞–±–ª–æ–Ω—ã –ø–∏—Å–µ–º"
let templates = base.getTable("–®–∞–±–ª–æ–Ω—ã –ø–∏—Å–µ–º");
let record = await input.recordAsync('–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏', templates);

if (!record) {
    output.markdown("‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –≤—ã–±—Ä–∞–Ω–∞");
    return;
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª–µ–π
let RICH_TEXT_FIELD = "–¢–µ–∫—Å—Ç –ø–∏—Å—å–º–∞"; // –ü–æ–ª–µ —Å Rich Text –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
let HTML_FIELD = "Html"; // –ü–æ–ª–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è HTML

output.markdown(`### üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è Rich Text –≤ HTML`);
output.markdown(`üìã –¢–∞–±–ª–∏—Ü–∞: **–®–∞–±–ª–æ–Ω—ã –ø–∏—Å–µ–º**`);
output.markdown(`üìù –ó–∞–ø–∏—Å—å: **${record.name || record.id}**`);
output.markdown(`üìù –ü–æ–ª–µ Rich Text: **${RICH_TEXT_FIELD}**`);
output.markdown(`üåê –ü–æ–ª–µ HTML: **${HTML_FIELD}**`);

let richTextContent = record.getCellValue(RICH_TEXT_FIELD);
let existingHtml = record.getCellValueAsString(HTML_FIELD);

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ Rich Text –∫–æ–Ω—Ç–µ–Ω—Ç
if (!richTextContent || richTextContent.trim() === "") {
    output.markdown(`\n‚ùå **–û—à–∏–±–∫–∞**: –í –ø–æ–ª–µ "${RICH_TEXT_FIELD}" –Ω–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏`);
    return;
}

// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –±—É–¥–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å
output.markdown(`\nüìÑ **Rich Text –∫–æ–Ω—Ç–µ–Ω—Ç:**`);
let preview = richTextContent;
output.markdown(`\`\`\`\n${preview}\n\`\`\``);

// –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º –µ—Å–ª–∏ HTML —É–∂–µ –µ—Å—Ç—å
if (existingHtml && existingHtml.trim() !== "") {
    output.markdown(`\n‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ**: –í –ø–æ–ª–µ "${HTML_FIELD}" —É–∂–µ –µ—Å—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ. –û–Ω–æ –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω–æ.`);
}

try {
    output.markdown(`\nüîÑ **–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é...**`);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é
    let response = await fetch(host + '/convert-airtable-rich-text', {
        method: 'POST',
        headers: {
            "Authorization": 'Bearer ' + token,
            "Content-Type": "application/json"
        },
        body: JSON.stringify({
            rich_text: richTextContent
        })
    });

    if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }

    let data = await response.json();

    if (!data.result) {
        throw new Error(data.message || "–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏");
    }

    let htmlContent = data.payload.html;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML –≤ –ø–æ–ª–µ
    await templates.updateRecordAsync(record.id, {
        [HTML_FIELD]: htmlContent
    });

    output.markdown(`\n‚úÖ **–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!**`);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    let htmlPreview = htmlContent;
    output.markdown(`\nüåê **–†–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∏–π HTML:**`);
    output.markdown(`\`\`\`html\n${htmlPreview}\n\`\`\``);

    output.markdown(`\nüìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**`);
    output.markdown(`- –ò—Å—Ö–æ–¥–Ω—ã–π Rich Text: **${richTextContent.length}** —Å–∏–º–≤–æ–ª–æ–≤`);
    output.markdown(`- –†–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∏–π HTML: **${htmlContent.length}** —Å–∏–º–≤–æ–ª–æ–≤`);
    output.markdown(`- –ü–æ–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: **${HTML_FIELD}**`);

} catch (error) {
    output.markdown(`\n‚ùå **–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏**: ${error.message}`);
    output.markdown(`\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:`);
    output.markdown(`- –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞: ${host}`);
    output.markdown(`- –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏`);
    output.markdown(`- –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–æ–ª—è "${RICH_TEXT_FIELD}"`);
}

output.markdown(`\n---\n### üìã –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∫—Ä–∏–ø—Ç:`);
output.markdown(`1. **–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç** –≤ Airtable`);
output.markdown(`2. **–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å** –∏–∑ —Ç–∞–±–ª–∏—Ü—ã "–®–∞–±–ª–æ–Ω—ã –ø–∏—Å–µ–º"`);
output.markdown(`3. **–°–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏**:`);
output.markdown(`   - –í–æ–∑—å–º–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–æ–ª—è "Rich Text"`);
output.markdown(`   - –û—Ç–ø—Ä–∞–≤–∏—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏`);
output.markdown(`   - –°–æ—Ö—Ä–∞–Ω–∏—Ç HTML –≤ –ø–æ–ª–µ "HTML Content"`);

output.markdown(`\n### ‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã Rich Text:`);
output.markdown(`- **–ó–∞–≥–æ–ª–æ–≤–∫–∏**: \`# ## ###\``);
output.markdown(`- **–°–ø–∏—Å–∫–∏**: \`- * 1. 2.\``);
output.markdown(`- **–ß–µ–∫–±–æ–∫—Å—ã**: \`[x] [ ]\``);
output.markdown(`- **–¶–∏—Ç–∞—Ç—ã**: \`>\``);
output.markdown(`- **–°—Å—ã–ª–∫–∏**: \`[text](url)\``);
output.markdown(`- **–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ**: \`**bold** *italic* ~~strike~~\``);
output.markdown(`- **–ö–æ–¥**: \`\`inline\`\` –∏ \`\`\`–±–ª–æ–∫–∏\`\`\``);

output.markdown(`\n### üìù –ü—Ä–∏–º–µ—Ä Rich Text –∫–æ–Ω—Ç–µ–Ω—Ç–∞:`);
output.markdown(`\`\`\`
# –ó–∞–≥–æ–ª–æ–≤–æ–∫ 1
> –¶–∏—Ç–∞—Ç–∞ —Å [—Å—Å—ã–ª–∫–æ–π](https://example.com)
- **–ñ–∏—Ä–Ω—ã–π** –∏ *–∫—É—Ä—Å–∏–≤* —Ç–µ–∫—Å—Ç
- ~~–ó–∞—á–µ—Ä–∫–Ω—É—Ç—ã–π~~ —Ç–µ–∫—Å—Ç
[x] –í—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞
[ ] –ù–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞
\`\`\``);