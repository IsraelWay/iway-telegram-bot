#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ /convert-airtable-rich-text
"""

import requests
import json
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
HOST = "http://localhost:5000"
AUTH_TOKEN = os.getenv("AUTH_TOKEN", "your_token_here")

def test_rich_text_conversion():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é Airtable Rich Text –≤ HTML"""
    
    # –¢–µ—Å—Ç–æ–≤—ã–π Rich Text –∫–æ–Ω—Ç–µ–Ω—Ç
    test_rich_text = """# –ì–ª–∞–≤–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫

## –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫

### –ü–æ–¥—Ä–∞–∑–¥–µ–ª

–û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –ø–µ—Ä–µ–Ω–æ—Å–æ–º —Å—Ç—Ä–æ–∫–∏.

> –≠—Ç–æ –≤–∞–∂–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞
> –ú–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞

–°–ø–∏—Å–æ–∫ –¥–µ–ª:
- –ü–µ—Ä–≤–∞—è –∑–∞–¥–∞—á–∞
- –í—Ç–æ—Ä–∞—è –∑–∞–¥–∞—á–∞
* –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–∞—Ä–∫–µ—Ä

–ù—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω:
1. –≠—Ç–∞–ø –ø–µ—Ä–≤—ã–π
2. –≠—Ç–∞–ø –≤—Ç–æ—Ä–æ–π
3. –§–∏–Ω–∞–ª

–ö–æ–¥ –≤ —Ç–µ–∫—Å—Ç–µ: `console.log("hello")`

–ë–ª–æ–∫ –∫–æ–¥–∞:
```
function example() {
    return "Rich Text works!";
}
```

–ö–æ–Ω–µ—Ü –¥–æ–∫—É–º–µ–Ω—Ç–∞."""

    data = {
        "rich_text": test_rich_text
    }

    headers = {
        "Authorization": f"Bearer {AUTH_TOKEN}",
        "Content-Type": "application/json"
    }

    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é Rich Text –≤ HTML...")
    print("\nüìù –ò—Å—Ö–æ–¥–Ω—ã–π Rich Text:")
    print("-" * 50)
    print(test_rich_text)
    print("-" * 50)

    try:
        response = requests.post(
            f"{HOST}/convert-airtable-rich-text",
            headers=headers,
            json=data
        )
        
        print(f"\nüìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            
            if result.get('result'):
                html = result['payload']['html']
                print("\n‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
                print("\nüåê –†–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∏–π HTML:")
                print("-" * 50)
                print(html)
                print("-" * 50)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
                with open('test_output.html', 'w', encoding='utf-8') as f:
                    f.write(f"""<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>–¢–µ—Å—Ç Rich Text –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏</title>
    <style>
        body {{ font-family: Arial, sans-serif; margin: 40px; }}
        blockquote {{ border-left: 4px solid #ccc; padding-left: 16px; margin: 16px 0; }}
        code {{ background: #f4f4f4; padding: 2px 4px; border-radius: 3px; }}
        pre {{ background: #f4f4f4; padding: 16px; border-radius: 5px; overflow-x: auto; }}
    </style>
</head>
<body>
{html}
</body>
</html>""")
                
                print("\nüìÑ HTML —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª test_output.html")
                
            else:
                print(f"\n‚ùå –û—à–∏–±–∫–∞: {result.get('message')}")
        else:
            print(f"\n‚ùå HTTP –æ—à–∏–±–∫–∞: {response.text}")

    except requests.exceptions.ConnectionError:
        print(f"\n‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ {HOST}")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ Flask —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")

def test_empty_input():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—É—Å—Ç–æ–π –≤–≤–æ–¥"""
    
    data = {"rich_text": ""}
    headers = {
        "Authorization": f"Bearer {AUTH_TOKEN}",
        "Content-Type": "application/json"
    }

    print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—É—Å—Ç–æ–π –≤–≤–æ–¥...")
    
    try:
        response = requests.post(
            f"{HOST}/convert-airtable-rich-text",
            headers=headers,
            json=data
        )
        
        result = response.json()
        
        if not result.get('result'):
            print("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –ø—É—Å—Ç–æ–π –≤–≤–æ–¥")
            print(f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ: {result.get('message')}")
        else:
            print("‚ùå –ü—É—Å—Ç–æ–π –≤–≤–æ–¥ –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –æ—à–∏–±–∫—É")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    if AUTH_TOKEN == "your_token_here":
        print("‚ö†Ô∏è  –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è AUTH_TOKEN")
        print("–ò–ª–∏ –∑–∞–º–µ–Ω–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–∫—Ä–∏–ø—Ç–µ")
    else:
        test_rich_text_conversion()
        test_empty_input()
        print("\nÔøΩÔøΩ –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!") 